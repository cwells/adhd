#!/bin/env python

"Much of this code was intentional."

import contextlib
import logging
import os
import subprocess
import sys
import time
import webbrowser
from pathlib import Path
from typing import Any, cast

from lib.boot import missing_modules

required_modules: dict[str, str] = {
    "box": "python-box",
    "click": "click",
    "filelock": "filelock",
    "rich": "rich",
    "ruamel.yaml": "ruamel.yaml",
    "toposort": "toposort",
    "yarl": "yarl",
}

if missing := missing_modules(required_modules):
    print("You need to install this program's dependencies, e.g. `python -m pip install -r requirements.txt\n")
    print(f"Missing modules: {', '.join(missing)}\n")
    sys.exit(1)

import click
import filelock
import ruamel.yaml as yaml
from lib.boot import missing_binaries
from lib.jobs import get_job, get_jobs
from lib.loader import get_loader
from lib.shell import shell
from lib.util import (
    ConfigBox,
    EnvParamType,
    PluginParamType,
    ProjectParamType,
    Style,
    _exit,
    check_project,
    console,
    get_local_env,
    get_lockfile,
    get_project_home,
    print_job_help,
)
from plugins import BasePlugin, load_plugins, notify_plugins, print_plugin_help

logging.getLogger("requests").setLevel(logging.WARNING)
lockfile: Path | None = get_lockfile()
if lockfile:
    lock = filelock.FileLock(lockfile, timeout=2)


# ==============================================================================


def read_project_config(project: str, debug: bool = False) -> dict[str, Any]:
    with open(project) as config_file:
        return ConfigBox(yaml.load(config_file, Loader=cast(Any, get_loader(debug=debug))))


# ==============================================================================


@lock
@click.command()
@click.option("--home/--no-home", default=True, help="Change to project HOME directory")
@click.option("-e", "--env", type=EnvParamType(), multiple=True, help="Define env var(s) from CLI")
@click.option("-p", "--plugin", type=PluginParamType(), multiple=True, help="Manage plugins using plugin:[on|off]")
@click.option("--explain", is_flag=True, default=False, help="Display help text from job and its dependencies")
@click.option("-v", "--verbose", is_flag=True, default=False, help="Send stdout of all jobs to console")
@click.option("--debug", is_flag=True, default=False, help="Generate extremely verbose output")
@click.option("-f", "--force", is_flag=True, default=False, help="Bypass skip checks")
@click.option("--fix-perms", is_flag=True, default=False, help="Fix file permissions")
@click.argument("project", type=ProjectParamType())
@click.argument("command", nargs=-1)
def main(
    home: bool,
    env: list[tuple[str, str]],
    plugin: list[tuple[str, bool]],
    project: str,
    command: tuple[str],
    explain: bool,
    verbose: bool,
    debug: bool,
    force: bool,
    fix_perms: bool,
) -> None:
    "You may also type `help jobs` or `help plugins` for detailed information on those topics."

    options_env: ConfigBox = ConfigBox(env)
    process_env: ConfigBox = ConfigBox()
    project_config: ConfigBox = ConfigBox()
    plugins_enabled: dict[str, bool] = dict(plugin)
    plugins: dict[str, BasePlugin]
    job: ConfigBox
    task: str
    style: Style | str
    returncode: int = 0
    job_name_len: int = 20

    if not check_project(project, fix_perms=fix_perms):
        sys.exit(1)

    # read configuration
    try:
        project_config.update(read_project_config(project, debug=debug))
        process_env.update(get_local_env(project_config, options_env))
    except Exception as e:
        console.print(f"{Style.ERROR}loading configuration {project}:\n")
        _exit(e, verbose=verbose, debug=debug)

    required_binaries: list[str] | None
    if required_binaries := project_config.get("requirements"):
        if missing := missing_binaries(required_binaries):
            console.print(
                f"This project requires the following programs be installed: [bold cyan]{'[/], [bold cyan]'.join(missing)}[/]\n"
            )
            sys.exit(1)

    silent: bool = project_config.get("silent", False)

    # display list of possible jobs
    pager: str | bool = project_config.get("pager", False)
    if set(command) == set(("help", "jobs")):
        jobs = {
            name: get_job(
                command,
                job,
                project_config["jobs"],
                process_env,
                explain=True,
            )
            for name, job in project_config["jobs"].items()
        }
        print_job_help(jobs, pager=pager, verbose=verbose)
        raise SystemExit

    if set(command) == set(("help", "plugins")):
        print_plugin_help(pager=pager, verbose=verbose)
        raise SystemExit

    if explain:
        console.print("\n[bold]The following jobs would be run, in this order:[/]\n")

    plugins = load_plugins(
        project_config=project_config,
        process_env=process_env,
        enabled=plugins_enabled,
        silent=silent,
        verbose=verbose,
        debug=debug,
        explain=explain,
    )

    #
    # main loop - get_jobs() returns topologically-sorted list of jobs
    #
    for job in get_jobs(
        command,
        project_config,
        process_env,
        plugins,
        silent=silent,
        verbose=verbose,
        debug=debug,
        explain=explain,
    ):
        if debug and verbose:
            console.print(job.to_dict())

        if explain:
            text: str = job.get("help", "No description.")
            console.print(f"[dim white]:black_circle:[/][bold cyan]{job['name']:<23}[/] [white]{text}[/]")
            if verbose:
                for task in job.get("tasks", []):
                    for idx, line in enumerate(task.split("\n")):
                        if _l := line.rstrip():
                            style = ["     [dim white]", Style.TASK_SKIP][idx == 0]
                            console.print(f"{style}{_l}", highlight=False)
            continue

        interactive: bool = job.get("interactive", False)
        silent = job.get("silent", False)
        workdir: Path = Path(job.get("workdir", ".")).expanduser().resolve()

        # go to workdir, if defined and not overridden by cli
        if home:
            try:
                if workdir.exists():
                    os.chdir(workdir)
            except Exception as e:
                console.print(f"{Style.ERROR}changing to directory {workdir}:\n")
                _exit(e, verbose=verbose, debug=debug)

        # skip / confirm
        if job.get("skip") and force is False:
            if not silent:
                console.print(f"{Style.JOB_SKIP}[bold blue]{job.name:<{job_name_len}}[/] [dim]{job.help}[/]")
            continue

        ctx: contextlib.AbstractContextManager = (
            contextlib.nullcontext()
            if debug or verbose or interactive
            else console.status(
                f"{Style.JOB_RUN_STATUS}[bold blue]{job.name:<{job_name_len}}[/] [dim]{job.help}[/]"
            )
        )
        with ctx as status:
            if debug or verbose:
                console.print(f"{Style.JOB_RUN}[bold blue]{job.name:<{job_name_len}}[/] [dim]{job.help}[/]")

            # each job can be composed of multiple tasks
            for task in job.tasks:
                process: subprocess.CompletedProcess | None = None
                returncode = 0

                try:
                    process = shell(
                        command=task,
                        workdir=workdir,
                        env=job.env,
                        interactive=interactive or debug,
                    )
                except Exception as e:
                    console.print(f"{Style.ERROR}loading executing {task}:\n")
                    _exit(e, verbose=verbose, debug=debug)
                else:
                    returncode = process.returncode

                if verbose:
                    console.print(f"{Style.JOB_UP}[white]task(s)[/]", highlight=False)
                    for idx, line in enumerate(task.strip().split("\n")):
                        style = Style.TASK_RUN if idx == 0 else "     "
                        console.print(f"{style}[dark_goldenrod]{line}[/]", highlight=False)

                if returncode == 0:
                    if tts := job.get("sleep", 0):
                        if debug or verbose:
                            console.print(f"{Style.WARNING}Sleeping for {tts} seconds.")
                        time.sleep(tts)
                else:
                    console.print(f"{Style.ERROR}Error: {task} exited with non-zero status.")
                    if process is not None and isinstance(process.stderr, bytes):
                        console.print(f"{Style.ERROR}{process.stderr.decode()}")

        # finally, open any uris specified in job config
        if uri := job.get("open"):
            if isinstance(uri, str):
                uri = [uri]
            for _u in uri:
                webbrowser.open_new_tab(_u)
                console.print(f"{Style.OPEN_FINISHED}[yellow]{_u}[/]", highlight=False)

        if debug or verbose or not silent:
            if debug:
                console.print(f"{Style.JOB_UP}[bold blue]{job.name:<{job_name_len}}[/]")
            else:
                console.print(f"{Style.JOB_UP}[bold blue]{job.name:<{job_name_len}}[/] [dim]{job.help}[/]")

    if explain:
        console.print()
    elif not silent:
        console.print(f"[bold white]Complete.[/]\n")

    if not explain:
        notify_plugins("exit", plugins, project_config, process_env)

    sys.exit(returncode)


# ==============================================================================

if __name__ == "__main__":
    try:
        main()
    except filelock.Timeout:
        console.print(f"Another instance of this program is currently running.")
